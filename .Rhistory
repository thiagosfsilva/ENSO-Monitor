ncol=3,
byrow=TRUE)
dw_rec <- classify(dw_crop,rec_mat)
plot(dw_rec,col=class_col[1:6])
rec_mat <- matrix(c(0,1,NA,
1,5,NA,
5,6,5,
6,7,6,
7,9,1),
ncol=3,
byrow=TRUE)
dw_rec <- classify(dw_crop,rec_mat)
plot(dw_rec,col=class_col[1:6])
rep_ind <-  which(!is.na(values(dw_rec)))
values(sv)[rep_ind] <- values(dw_rec)[rep_ind]
plot(sv,col=class_col[1:6])
writeRaster(sv,'E:/NGS_wetlands_map/test.tif')
library(tools)
fname <- basename(file_path_sans_ext(sieved[1]))
fname
?writeRaster
sieved <- list.files("C:/Projects/NGS_Amazon_mapping/output/sieve/",
pattern='tile.*tif$',
full.names = TRUE)
?lapply
proc_raster <- function(inras){
sv <- rast(inras)
# plot(sv,col=class_col[1:4])
dw_crop <- resample(DW,y=sv,method='near')
#plot(dw_crop)
dw_crop[is.na(dw_crop)] <- 9
dw_rec <- classify(dw_crop,rec_mat)
# plot(dw_rec,col=class_col[1:6])
rep_ind <-  which(!is.na(values(dw_rec)))
values(sv)[rep_ind] <- values(dw_rec)[rep_ind]
#plot(sv,col=class_col[1:6])
fname <- basename(file_path_sans_ext(inras))
fpath <- paste0("C:/Projects\NGS_Amazon_mapping/output/sieve_comb/",fname,'_comb.tif')
proc_raster <- function(inras){
sv <- rast(inras)
# plot(sv,col=class_col[1:4])
dw_crop <- resample(DW,y=sv,method='near')
#plot(dw_crop)
dw_crop[is.na(dw_crop)] <- 9
dw_rec <- classify(dw_crop,rec_mat)
# plot(dw_rec,col=class_col[1:6])
rep_ind <-  which(!is.na(values(dw_rec)))
values(sv)[rep_ind] <- values(dw_rec)[rep_ind]
#plot(sv,col=class_col[1:6])
fname <- basename(file_path_sans_ext(inras))
fpath <- paste0("C:/Projects\NGS_Amazon_mapping/output/sieve_comb/",fname,'_comb.tif')
proc_raster <- function(inras){
sv <- rast(inras)
# plot(sv,col=class_col[1:4])
dw_crop <- resample(DW,y=sv,method='near')
#plot(dw_crop)
dw_crop[is.na(dw_crop)] <- 9
dw_rec <- classify(dw_crop,rec_mat)
# plot(dw_rec,col=class_col[1:6])
rep_ind <-  which(!is.na(values(dw_rec)))
values(sv)[rep_ind] <- values(dw_rec)[rep_ind]
#plot(sv,col=class_col[1:6])
fname <- basename(file_path_sans_ext(inras))
fpath <- paste0("C:/Projects/NGS_Amazon_mapping/output/sieve_comb/",fname,'_comb.tif')
writeRaster(sv,fpath,filetype='GTiff',datatype='INT1U')
}
lapply(sieved,proc_raster,)
sieved <- list.files("C:/Projects/NGS_Amazon_mapping/output/sieve/",
pattern='tile.*tif$',
full.names = TRUE)
DW <- rast('E:/NGS_wetlands_map/DW/DW_albers_12_5.tif')
class_col <- c("#1f78b4","#b2df89","#33a02c","#aaaaaa","#e31a1c", "#ffff99")
class_names <- c('None','Permanent Water Bodies',
'Non-forest wetland vegetation',
'Wetland Forest',
'Upland',
'Built-up areas',
'Beaches'
)
rec_mat <- matrix(c(0,1,NA,
1,5,NA,
5,6,5,
6,7,6,
7,9,1),
ncol=3,
byrow=TRUE)
proc_raster <- function(inras){
sv <- rast(inras)
# plot(sv,col=class_col[1:4])
dw_crop <- resample(DW,y=sv,method='near')
#plot(dw_crop)
dw_crop[is.na(dw_crop)] <- 9
dw_rec <- classify(dw_crop,rec_mat)
# plot(dw_rec,col=class_col[1:6])
rep_ind <-  which(!is.na(values(dw_rec)))
values(sv)[rep_ind] <- values(dw_rec)[rep_ind]
#plot(sv,col=class_col[1:6])
fname <- basename(file_path_sans_ext(inras))
fpath <- paste0("C:/Projects/NGS_Amazon_mapping/output/sieve_comb/",fname,'_comb.tif')
writeRaster(sv,fpath,filetype='GTiff',datatype='INT1U')
}
lapply(sieved,proc_raster)
# Plot preci and water level from ANA
library(dplyr)
library(ggplot2)
library(tidyr)
library(lubridate)
library(scales)
library(httr)
######  ANA GET requst
ana_url <- 'http://telemetriaws1.ana.gov.br/ServiceANA.asmx/DadosHidrometeorologicos'
cod_esta <- '12850000'
data_ini <- '1900-01-01'
data_fim <- '2032-12-01'
r <- GET(ana_url, accept_json(), query = list(codEstacao = cod_esta,
dataInicio = data_ini,
dataFim= data_fim))
# rawToChar() will convert raw data
# to char and store in response variable
response < - rawToChar(r$content)
# rawToChar() will convert raw data
# to char and store in response variable
response <- rawToChar(r$content)
# print response
print(response)
library(JSON)
install.packages("JSON")
install.packages("tidyve")
install.packages(c("tidyverse", "jsonlite"))
library(tidyverse)
ana_url <- 'http://telemetriaws1.ana.gov.br/ServiceANA.asmx/DadosHidrometeorologicos'
cod_esta <- '12850000'
data_ini <- '1900-01-01'
data_fim <- '2032-12-01'
r <- GET(ana_url, accept_json(), query = list(codEstacao = cod_esta,
dataInicio = data_ini,
dataFim= data_fim))
library(httr)
?GET
response <- GET(ana_url, query = list(codEstacao = cod_esta,
dataInicio = data_ini,
dataFim= data_fim)) %>%
content()
# get names of the categories
category_names <- pluck(raw_json, "categories", 1, "labels") %>% tolower()
# get names of the categories
category_names <- pluck(response, "categories", 1, "labels") %>% tolower()
# Exploring the data levels
str(response,max.level = 1)
# Exploring the data levels
str(response$doc,max.level = 1)
# Exploring the data levels
str(response$node,max.level = 1)
install.packages("xml2")
library(xml2)
# Parse xml data
cotas_xml = as_list(read_xml(response))
# Parse xml data
cotas_xml = as_list(read_xml(response$doc))
?xml2
?read_xml
str(content)
str(response)
response <- response %>% rawToChar()
response <- rawToChar(response)
# Get the data
response <- GET(ana_url, query = list(codEstacao = cod_esta,
dataInicio = data_ini,
dataFim= data_fim)) %>%
rawToChar()
x <- c(1,2,3,4,5,6)
y <- c(5,6,7,8,9)
match(x,y)
intersect(x,y)
x %in% y
y[x %in% y]
x[x %in% y]
?mclaplly
parallel::
?parallel::mclapply
raster
library(raster)
mwtd <- raster('C:/Users/Thiago/Downloads/SAMERICA_WTD_annualmean.nc')
install.packages("ncdf4")
mwtd <- raster('C:/Users/Thiago/Downloads/SAMERICA_WTD_annualmean.nc')
mwtd
plot(mwtd)
mwtd <- raster('C:/Users/Thiago/Downloads/SAMERICA_WTD_monthlymeans.nc')
mwtd
library(sf)
library(terra)
library(sf)
awtd <- rast('C:/Users/Thiago/Downloads/SAMERICA_WTD_annualmean.nc')
mwtd <- rast('C:/Users/Thiago/Downloads/SAMERICA_WTD_monthlymeans.nc')
plots <- st_read('C:/Users/Thiago/Downloads/cwm50_input_map_mcwd_29sep23.gpkg')
mwtd
p_awtd <- extract(awtd,plots)
p_awtd
p_mwtd <- extract(mwtd,plots)
p_mwtd
wtd_df <- cbind(plots,p_awtd,p_mwtd)
libreray(dplyr)
library(dplyr)
?select
wrd_df <- wtd_df %>% select(-c(ID,mask,ID.1,mask.1)
)
View(wrd_df)
write.csv(wtd_df,'cwm50_input_map_mcwd+wtd_06oct23.csv',row.names = FALSE)
getwd()
source("C:/Users/Thiago/Documents/wtd_extract.R", echo=TRUE)
source("C:/Users/Thiago/OneDrive - University of Stirling/Manuscripts/jurua_blurb/analysis/analysis.R", echo=TRUE)
library(dplyr)
library(ggplot2)
library(tidyr)
library(lubridate)
library(scales)
library(httr)
library(here)
library(reticulate)
prec1 <- read.csv('chuvas_C_00266000_daily.csv')
getwd()
source("C:/Users/Thiago/OneDrive - University of Stirling/Manuscripts/jurua_blurb/analysis/analysis.R", echo=TRUE)
library(lidR)
las <- readLAS(""C:/Users/Thiago/University of Stirling/Thiago_Data_Drive - Documents/Flanders_moss/Survey_2022_09_24/lidar/Flanders_Moss_LiDAR_2022_09_24.las"")
las <- readLAS("C:/Users/Thiago/University of Stirling/Thiago_Data_Drive - Documents/Flanders_moss/Survey_2022_09_24/lidar/Flanders_Moss_LiDAR_2022_09_24.las")
poly <- st_read("C:\Users\Thiago\Desktop\Drone_lab_eplppg1\subset_extent.shp")
?crop
crs(poly())
crs(poly)
xeipe <- st_read("C:\Users\Thiago\Desktop\Drone_lab_eplppg1\subset_extent.shp")
xeipe <- st_read("C:/Users/Thiago/Desktop/Drone_lab_eplppg1/subset_extent.shp")
library9sf
library(sf)
xeipe <- st_read("C:/Users/Thiago/Desktop/Drone_lab_eplppg1/subset_extent.shp")
las_clip <- clip(las,poly)
las_clip <- lidR::clip(las,poly)
las_clip <- clip_roi(las,poly)
xeipe <- st_as_sf(st_read("C:/Users/Thiago/Desktop/Drone_lab_eplppg1/subset_extent.shp"))
las_clip <- clip_roi(las,poly)
library(sp)
xeipe <- shapefile("C:/Users/Thiago/Desktop/Drone_lab_eplppg1/subset_extent.shp")
library(raster)
xeipe <- shapefile("C:/Users/Thiago/Desktop/Drone_lab_eplppg1/subset_extent.shp")
las_clip <- clip_roi(las,xeipe)
crs(las)
crs(xeipe)
xeipe <- st_read("C:/Users/Thiago/Desktop/Drone_lab_eplppg1/subset_extent.shp")
?st_crs
xeipe <- st_read("C:/Users/Thiago/Desktop/Drone_lab_eplppg1/subset_extent.shp")
las_clip <- clip_roi(las,xeipe)
writeLas(lasclip,'C:/Users/Thiago/Desktop/Drone_lab_eplppg1/lidar/Flanders_Moss.las')
writeLAS(lasclip,'C:/Users/Thiago/Desktop/Drone_lab_eplppg1/lidar/Flanders_Moss.las')
writeLAS(las_clip,'C:/Users/Thiago/Desktop/Drone_lab_eplppg1/lidar/Flanders_Moss.las')
## Load a reference polygon for searching
aoi = st_read("C:/Users/Thiago/OneDrive - University of Stirling/Research/Funded_CoI/Tree_PlaNat/site_kmls/Brankley Pastures.kml")
aoi_geojson <- sf_geojson(aoi)
library(mapview)
mapview(aoi)
## Load required libraries
library(httr2)
library(sf)
library(geojsonsf)
library(mapview)
## Load a reference polygon for searching
aoi = st_read("C:/Users/Thiago/OneDrive - University of Stirling/Research/Funded_CoI/Tree_PlaNat/site_kmls/Brankley Pastures.kml")
mapview(aoi)
plot(aoi)
aoi_geojson <- sf_geojson(aoi)
## Define the source URL for HLS data
hls_source <- 'https://ag-analytics.azure-api.net/hls-service/'
## Create a requets pipeline using the API parameters
hls_req <- request(hls_source)
hls_full_req <-
req_headers(aoi = aoi)
hls_req
hls_req %>% req_dry_run()
?request
hls_full_req <- hls_req %>%
req_headers(aoi = aoi_geojson)
hls_full_req %>% req_dry_run()
hls_full_req <- hls_req %>%
req_headers(aoi = aoi_geojson[1])
hls_full_req %>% req_dry_run()
aoi_geojson <- sf_geojson(aoi[1])
aoi
aoi[[1]]
aoi_geojson <- sf_geojson(aoi[[1]])
summay(aoi)
summary(aoi)
class(aoi)
aoi
aoi[1]
aoi[[1]]
aoi_geojson <- sf_geojson(aoi[1])
aoi_geojson <- sf_geojson(aoi)
## Create a requets pipeline using the API parameters
hls_req <- request(hls_source) %>% req_method("POST")
hls_req %>% req_dry_run()
hls_full_req <- hls_req %>%
req_headers(aoi = aoi_geojson[1])
hls_full_req %>% req_dry_run()
hls_full_req <- hls_req %>%
req_headers(AOI = aoi_geojson,
byweek = 1,
interpolate=1)
resp <- req_perform(hls_req)
## Define the source URL for HLS data
hls_source <- 'https://ag-analytics.azure-api.net/hls-service/'
hls_full_req <- hls_req %>%
req_headers(AOI = '{"type":"Feature","geometry":{"type":"Polygon","coordinates":[[[-92.329005, 41.6850758], [-92.3290479, 41.681366], [-92.3240805, 41.6813179], [-92.3255289, 41.6841784], [-92.329005, 41.6850758]]]}}',
Band =  "['Red','Red_Edge_1','Red_Edge_2','Red_Edge_2','SWIR1','SWIR2']",
Enddate =  "3/8/2019",
Startdate =  "3/2/2019",
legendtype =  "Relative",
qafilter =  "1",
satellite =  "Landsat,Sentinel",
resolution = "0.00001",
Content-Type = 'application/x-www-form-urlencoded')
hls_full_req <- hls_req %>%
req_headers(AOI = '{"type":"Feature","geometry":{"type":"Polygon","coordinates":[[[-92.329005, 41.6850758], [-92.3290479, 41.681366], [-92.3240805, 41.6813179], [-92.3255289, 41.6841784], [-92.329005, 41.6850758]]]}}',
Band =  "['Red','Red_Edge_1','Red_Edge_2','Red_Edge_2','SWIR1','SWIR2']",
Enddate =  "3/8/2019",
Startdate =  "3/2/2019",
legendtype =  "Relative",
qafilter =  "1",
satellite =  "Landsat,Sentinel",
resolution = "0.00001",
Content-Type = 'application/x-www-form-urlencoded')
install.packages("visreg")
79 * 1.88729
9.7 * -1.61485
9.7 * -3.86658
-89.73274 + (7.8925) + (149.0959) + (-15.66404) + (28.91928) + (-37.50583)
24.12 + (0.346 * 43.9)
24.12 + (0.346 * 37.1) + (2.91) + (-0.156 * 37.1)
24.12 + (0.346 * 45.5) + (-13.504) + (0.275 * 45.5)
10.74 + (0.054* 69.1)
10.74 + (0.054* 108.3) + (-6.131) + (-0.017 * 108.3)
10.74 + (0.054* 108.3) + (-5.3) + (0.003 * 108.3)
5.628 + (0.239 * 10.44)
6.61 + (0.239 * 6.61) + (8.444) + (-0.036 * 6.61)
5.628 + (0.239 * 10.16) + (-4.439) + (-0.036 *) + (0.005 * 10.16)
5.628 + (0.239 * 10.16) + (-4.439) + (0.005 * 10.16)
374.8 + (4.191 * 49.7)
374.8 + (4.191 * 38.6) + (-354.1) + (-1.504* 38.6)
374.8 + (4.191 * 36.2) + (-209.0) + (-1.637 * 36.2)
source("C:/Projects/NGS_PP_GPS/plot_4c_coord estimate.R", echo=TRUE)
print(coords[,c(1,5:7)],digits = 3)
print(coords[,c(1,5:7)],digits = 5)
print(coords[,c(1,5:7)])
round(coords[,c(1,5:7)],3)
round(coords[,c(5:7)],3)
round(coords[,c(5:7)],5)
coords <- data.frame(target=c('T1','T2','T3'),
x = c(-1,23.84,66.81),
y = c(5.96,-37.28,-11.41),
z = c(-1.07,-0.57,-0.88),
n = c(9692408.040,9692384.626,NA),
e = c(268705.664,268662.330,NA),
h = c(36.0649,34.4735,NA)
)
coords[1,5]
round(coords[1,5],3)
n = c(9692408.040,9692384.626,NA)
n
str(n)
coords <- data.frame(target=c('T1','T2','T3'),
x = c(-1,23.84,66.81),
y = c(5.96,-37.28,-11.41),
z = c(-1.07,-0.57,-0.88),
n = c(9692408.040,9692384.626,NA),
e = c(268705.664,268662.330,NA),
h = c(36.0649,34.4735,NA)
)
coords$n[3] <- mean(coords$n[1] + (coords$x[1]-coords$x[3]),
coords$n[2] + (coords$x[2]-coords$x[3]))
coords$e[3] <- mean(coords$e[1] + (coords$y[1]-coords$y[3]),
coords$e[2] + (coords$y[2]-coords$y[3]))
coords$h[3] <- mean(coords$h[1] + (coords$z[1]-coords$z[3]),
coords$h[2] + (coords$z[2]-coords$z[3]))
coords
write.csv(coords,'coords,csv')
getwd()
coords$e[3] <- mean(coords$e[1] + (coords$x[1]-coords$x[3]),
coords$e[2] + (coords$x[2]-coords$x[3]))
coords <- data.frame(target=c('T1','T2','T3'),
x = c(-1,23.84,66.81),
y = c(5.96,-37.28,-11.41),
z = c(-1.07,-0.57,-0.88),
n = c(9692408.040,9692384.626,NA),
e = c(268705.664,268662.330,NA),
h = c(34.4735,36.0649,NA)
)
print(de_t1t2 <- coords$e[1] - coords$e[2])
print(dn_t1t2 <- coords$n[1] - coords$n[2])
print(dh_t1t2 <- coords$h[1] - coords$h[2])
print(dx_t1t2 <- coords$x[1] - coords$x[2])
print(dy_t1t2 <- coords$y[1] - coords$y[2])
print(dz_t1t2 <- coords$z[1] - coords$z[2])
coords <- data.frame(target=c('T1','T2','T3'),
x = c(-1,23.84,66.81),
y = c(5.96,-37.28,-11.41),
z = c(-1.07,-0.57,-0.88),
n = c(9692408.040,9692384.626,NA),
e = c(268705.664,268662.330,NA),
h_ppk = c(34.4735,36.0649,NA),
h_rtk = c(48.405,50.22,39.727)
)
# RTK - PPK height diffs:
#t1
coords$h_rtk - coords$h_ppk
# RTK - PPK height diffs:
#t1
coords$h_rtk - coords$h_ppk
# RTK - PPK height diffs:
#t1
coords$h_rtk - coords$h_ppk
# RTK - PPK height diffs:
#t1
mean(coords$h_rtk - coords$h_ppk,na.rm=T)
# RTK - PPK height diffs:
#t1
h_dif <- mean(coords$h_rtk - coords$h_ppk,na.rm=T)
# expected height T3
exp_hT3 <- coords$h_rtk[3] - h_dif
coords$e[3] <- mean(coords$e[1] + (coords$x[1]-coords$x[3]),
coords$e[2] + (coords$x[2]-coords$x[3]))
coords$n[3] <- mean(coords$n[1] + (coords$y[1]-coords$y[3]),
coords$n[2] + (coords$y[2]-coords$y[3]))
coords$h[3] <- mean(coords$h[1] + (coords$z[1]-coords$z[3]),
coords$h[2] + (coords$z[2]-coords$z[3]))
coords$e[3] <- mean(coords$e[1] + (coords$x[1]-coords$x[3]),
coords$e[2] + (coords$x[2]-coords$x[3]))
coords$n[3] <- mean(coords$n[1] + (coords$y[1]-coords$y[3]),
coords$n[2] + (coords$y[2]-coords$y[3]))
coords$h[3] <- mean(coords$h_ppk[1] + (coords$z[1]-coords$z[3]),
coords$h_ppk[2] + (coords$z[2]-coords$z[3]))
coords
coords <- data.frame(target=c('T1','T2','T3'),
x = c(-1,23.84,66.81),
y = c(5.96,-37.28,-11.41),
z = c(-1.07,-0.57,-0.88),
n = c(9692408.040,9692384.626,NA),
e = c(268705.664,268662.330,NA),
h_ppk = c(34.4735,36.0649,NA),
h_rtk = c(48.405,50.22,39.727)
)
# RTK - PPK height diffs:
#t1
h_dif <- mean(coords$h_rtk - coords$h_ppk,na.rm=T)
# expected height T3
exp_hT3 <- coords$h_rtk[3] - h_dif
coords$e[3] <- mean(coords$e[1] + (coords$x[1]-coords$x[3]),
coords$e[2] + (coords$x[2]-coords$x[3]))
coords$n[3] <- mean(coords$n[1] + (coords$y[1]-coords$y[3]),
coords$n[2] + (coords$y[2]-coords$y[3]))
coords$h_ppk[3] <- mean(coords$h_ppk[1] + (coords$z[1]-coords$z[3]),
coords$h_ppk[2] + (coords$z[2]-coords$z[3]))
coords
# Dif height T3-T1
coords$h_ppk[1] - coords$h_rtk[1]
coords$h_ppk[2] - coords$h_rtk[2]
# Dif Z and H
coords$h_ppk[1] - coords$h_ppk[2]
coords$h_rtk[1] - coords$h_rtk[2]
# Dif height T3-T1
coords$h_ppk[1] - coords$h_rtk[1]
coords$h_ppk[2] - coords$h_rtk[2]
coords$h_ppk[3] - coords$h_rtk[3]
coords$h_ppk[3] <- exp_hT3
coords
write.csv(coords, 'coords.csv')
5.628 + (6.61 * 0.239) + (1 * 8.444) + (0 * (-4.439)) + (6.61* 1 * (-0.036)) + (6.61* 0 * 0.005)
5.628 + (0.239 * 6.61) + (8.444) + (-0.036 * 6.61)
5.628 + (0.239 * 6.61) + 8.444
5.628 + (10.44*0.239) + (1*0)
5.628 + (6.61*0.239) + (1*8.444)
5.628 + (10.61*0.239) + (1*-4.439)
source("C:/Users/Thiago/Downloads/Mixed_models_islands_v2.R", echo=TRUE)
library(terra)
rasts <- list.files('C:/Users/Thiago/OneDrive - University of Stirling/Teaching/_GEOU9SP/assessments/final_project/individual_version/data/\terrain50/terrain-50-dtm_5313148/',
pattern='asc$', recursive = TRUE, full.names = TRUE)
rasts <- list.files('C:/Users/Thiago/OneDrive - University of Stirling/Teaching/_GEOU9SP/assessments/final_project/individual_version/data/\terrain50/terrain-50-dtm_5313148/',
pattern='.*asc', recursive = TRUE, full.names = TRUE)
rasts <- list.files('C:/Users/Thiago/OneDrive - University of Stirling/Teaching/_GEOU9SP/assessments/final_project/individual_version/data/\terrain50/terrain-50-dtm_5313148/',
pattern='.asc$', recursive = TRUE, full.names = TRUE)
rasts <- list.files('C:/Users/Thiago/OneDrive - University of Stirling/Teaching/_GEOU9SP/assessments/final_project/individual_version/data/terrain50/terrain-50-dtm_5313148/',
pattern='.asc$', recursive = TRUE, full.names = TRUE)
?mosaic
rasts <- lapply(rasts,rast())
rasts <- lapply(rasts,rast)
mos <- mosaic(rasts)
col <- sprc(rasts)
mos <- mosaic(col)
writeraster(mos,'OS-50m_mosaic.tif')
writeRaster(mos,'OS-50m_mosaic.tif')
plot(mos)
as.Date('2022-05-04')-as.Date('2022-04-10')
as.Date('2022-09-30')-as.Date('2022-11-22')
reticulate::repl_python()
import pickle
import pandas
import pandas as pd
import os
os.setwd('C:/Projects/ENSO-Monitor/')
os.chwd('C:/Projects/ENSO-Monitor/')
chwd('C:/Projects/ENSO-Monitor/')
os.chdir('C:/Projects/ENSO-Monitor/')
fb = pd.read_pickle("data/hisCota.pkl")
f.heaf()
f.head()
fb.head()
